[33mcommit 8cff3c3e2b4eb04eb3406fe4807186d74524220f[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: pytry3g <pypytry3g@gmail.com>
Date:   Sun Mar 11 20:49:52 2018 +0900

    revised

[1mdiff --git a/hasami/qiita.py b/hasami/qiita.py[m
[1mindex 63f9e85..97048a0 100644[m
[1m--- a/hasami/qiita.py[m
[1m+++ b/hasami/qiita.py[m
[36m@@ -136,13 +136,12 @@[m [mclass App(tk.Tk):[m
             if flag == 0:[m
                 return[m
             self.current_tag = tag[m
[31m-            # クリックされたところが、候補手にある。[m
[32m+[m[32m            # クリックされたところが、候補手にあるので盤面の更新。[m
             self.update_board(tag)[m
 [m
     def update_board(self, tag):[m
         if self.turn:[m
             self.lock = 1[m
[31m-        #self.print_turn()[m
         # 候補手の色を元に戻す[m
         for z in self.candidates:[m
             ctag = self.z2tag[z][m
[36m@@ -156,9 +155,11 @@[m [mclass App(tk.Tk):[m
         self.unpressed = 1[m
         self.previous_tag = None[m
         self.candidates = [][m
[32m+[m[32m        # 挟まれているかの確認[m
         self.after(1000, self.check)[m
 [m
     def show(self, tag):[m
[32m+[m[32m        # 候補手の表示[m
         self.candidates = [][m
         z = self.z_coordinate(tag)[m
         self.search(z)[m
[36m@@ -167,6 +168,7 @@[m [mclass App(tk.Tk):[m
             self.board.itemconfig(ctag, fill="Peach Puff1")[m
 [m
     def search(self, z):[m
[32m+[m[32m        # 候補手の探索[m
         for num in [-11, 11, 1, -1]:[m
             self.tmp = [][m
             self.run_search(z+num, num)[m
[36m@@ -185,28 +187,10 @@[m [mclass App(tk.Tk):[m
         ans = self.z_coordinate(tag)[m
         return 1 if ans in self.candidates else 0[m
 [m
[31m-    def enemy(self):[m
[31m-        if self.enlock:[m
[31m-            return[m
[31m-        self.turn = 0[m
[31m-        self.candidates = [][m
[31m-        while True:[m
[31m-            z = random.choice([i for i, v in enumerate(self.board2info) if v == 1])[m
[31m-            # 動かす駒の符号[m
[31m-            self.previous_tag = self.z2tag[z][m
[31m-            self.search(z)[m
[31m-            if self.candidates:[m
[31m-                break[m
[31m-[m
[31m-        # 候補手からランダムに選択[m
[31m-        z = random.choice(self.candidates)[m
[31m-        # 動かした後の符号[m
[31m-        self.current_tag = self.z2tag[z][m
[31m-        self.update_board(self.current_tag)[m
[31m-[m
     def check(self):[m
         self.retrieves = [][m
         z = self.z_coordinate(self.current_tag)[m
[32m+[m[32m        # 挟んでるかの確認[m
         self.is_hasami(z)[m
 [m
         # とる[m
[36m@@ -219,10 +203,29 @@[m [mclass App(tk.Tk):[m
 [m
         # 手番を変える[m
         if self.turn:[m
[31m-            self.after(1000, self.enemy)[m
[32m+[m[32m            self.after(1000, self.AI)[m
         else:[m
             self.after(1000, self.YOU)[m
 [m
[32m+[m[32m    def AI(self):[m
[32m+[m[32m        if self.enlock:[m
[32m+[m[32m            return[m
[32m+[m[32m        self.turn = 0[m
[32m+[m[32m        self.candidates = [][m
[32m+[m[32m        while True:[m
[32m+[m[32m            z = random.choice([i for i, v in enumerate(self.board2info) if v == 1])[m
[32m+[m[32m            # 動かす駒の符号[m
[32m+[m[32m            self.previous_tag = self.z2tag[z][m
[32m+[m[32m            self.search(z)[m
[32m+[m[32m            if self.candidates:[m
[32m+[m[32m                break[m
[32m+[m
[32m+[m[32m        # 候補手からランダムに選択[m
[32m+[m[32m        z = random.choice(self.candidates)[m
[32m+[m[32m        # 動かした後の符号[m
[32m+[m[32m        self.current_tag = self.z2tag[z][m
[32m+[m[32m        self.update_board(self.current_tag)[m
[32m+[m
     def YOU(self):[m
             self.turn = 1[m
             self.lock = 0[m
